// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"gin-demo/controller"
	"gin-demo/repository"
	"gin-demo/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeContainer 初始化应用容器
func InitializeContainer() *Container {
	userRepository := repository.NewUserRepository()
	userService := service.NewUserService(userRepository)
	userController := controller.NewUserController(userService)
	authService := service.NewAuthService(userRepository)
	authController := controller.NewAuthController(authService)
	emailService := service.NewEmailService()
	emailController := controller.NewEmailController(emailService)
	redisBasicService := service.NewRedisBasicService()
	container := &Container{
		UserController:  userController,
		AuthController:  authController,
		EmailController: emailController,
		UserService:     userService,
		AuthService:     authService,
		EmailService:    emailService,
		RedisService:    redisBasicService,
		UserRepository:  userRepository,
	}
	return container
}

// wire.go:

// RepositorySet Repository 层的 Provider 集合
var RepositorySet = wire.NewSet(repository.NewUserRepository)

// ServiceSet Service 层的 Provider 集合
var ServiceSet = wire.NewSet(service.NewUserService, service.NewAuthService, service.NewEmailService, service.NewRedisBasicService)

// ControllerSet Controller 层的 Provider 集合
var ControllerSet = wire.NewSet(controller.NewUserController, controller.NewAuthController, controller.NewEmailController)

// AllSet 所有 Provider 的集合
var AllSet = wire.NewSet(
	RepositorySet,
	ServiceSet,
	ControllerSet,
)

// Container 应用容器
type Container struct {
	UserController  *controller.UserController
	AuthController  *controller.AuthController
	EmailController *controller.EmailController
	UserService     *service.UserService
	AuthService     *service.AuthService
	EmailService    *service.EmailService
	RedisService    *service.RedisBasicService
	UserRepository  *repository.UserRepository
}
